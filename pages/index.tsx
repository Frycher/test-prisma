import { ChangeEvent, FormEvent, useCallback, useState } from 'react';
import type { GetServerSideProps, GetServerSidePropsResult, NextPage } from 'next';
import Head from 'next/head';
import prisma from '../lib/prisma';
import { Post } from '@prisma/client';
import { getSession, signIn, signOut } from 'next-auth/client';

import styles from '../styles/Home.module.css';

export interface ICreatePost {
	title: string;
	description: string;
}
interface IHomeProps {
	posts: Post[];
	// session:
}
const Home: NextPage<IHomeProps> = (props) => {
	const { posts, session } = props;

	const [statePosts, setStatePosts] = useState(posts);
	// console.log('props,', props);

	const createPost = async (post: ICreatePost): Promise<Post> => {
		console.log('post', post);

		const respone = await fetch('/api/post', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(post),
		});
		if (!respone.ok) {
			throw new Error(respone.statusText);
		}
		return await respone.json();
	};
	const [error, setError] = useState<string>('');

	const onSubmitPost = async (e: FormEvent) => {
		e.preventDefault();
		try {
			const post: Post = await createPost(state);

			setStatePosts((prev) => [...prev, post]);
			setState({
				title: '',
				description: '',
			});
		} catch (error: any) {
			setError(error.response);
			console.log(error?.response?.data);
		}
	};

	const postDelete = async (id: string) => {
		try {
			const respone = await fetch('/api/postDelete', {
				method: 'DELETE',
				body: JSON.stringify(id),
			});
			if (!respone.ok) {
				throw new Error(respone.statusText);
			}
			return await respone.json();
		} catch (error) {
			console.error(error);
		}
	};

	const handlePostDelete = async (id: string) => {
		await postDelete(id);
		const newPosts = statePosts.filter((post: Post) => post.id !== id);
		setStatePosts(newPosts);
	};

	const [state, setState] = useState<ICreatePost>({
		title: '',
		description: '',
	});

	const handleChangeTitle = useCallback((e: ChangeEvent<HTMLInputElement>) => {
		setState((prev) => ({ ...prev, title: e.target.value }));
	}, []);
	const handleChangeDescr = useCallback((e: ChangeEvent<HTMLInputElement>) => {
		setState((prev) => ({ ...prev, description: e.target.value }));
	}, []);

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div>
				{/* <form>
					<input type="text" placeholder="login" />
					<input type="password" placeholder="password" />
					<button>login</button>
				</form> */}
				<button onClick={() => signIn()}>sign in</button>
			</div>
			<div style={{ borderTop: '5px solid #000', width: '100%', marginBottom: 30, marginTop: 30 }}></div>
			{JSON.stringify(state)}
			<br />
			<br />
			<form onSubmit={onSubmitPost}>
				<input type="text" name="title" value={state.title} onChange={handleChangeTitle} placeholder="title" />
				<input type="text" name="descr" value={state.description} onChange={handleChangeDescr} placeholder="descripton" />
				<button> submit</button>
			</form>
			{error && error}
			<div style={{ borderTop: '5px solid #000', width: '100%', marginBottom: 30, marginTop: 30 }}></div>
			{statePosts.map((post: Post) => {
				return (
					<div key={post.id} style={{ border: '1px solid red', marginBottom: 10, padding: 10, width: '50%', fontSize: 20 }}>
						<div>title: {post.title}</div>
						<div>description: {post.description}</div>
						<button style={{ margin: 'auto', display: 'block', width: '50%' }} onClick={() => handlePostDelete(post.id)}>
							Delete
						</button>
					</div>
				);
			})}
		</div>
	);
};

export default Home;

export async function getServerSideProps(context: GetServerSideProps): Promise<GetServerSidePropsResult<IHomeProps>> {
	const session = await getSession(context);
	const posts = await prisma.post.findMany();
	console.log(session);

	// if (!session) {
	// 	return {
	// 		props: {
	// 			session: null,
	// 		},
	// 	};
	// }

	return {
		props: {
			posts: JSON.parse(JSON.stringify(posts)),
		},
	};
}
